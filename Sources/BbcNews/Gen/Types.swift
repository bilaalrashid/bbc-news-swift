// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Fetch a BBC news page.
    ///
    /// Returns data for a page that returns a list of links to stories, or the contents of an individual story (deprecated). Examples include the "Home" tab, pages for specific topic categories.
    ///
    /// - Remark: HTTP `GET /fd/abl`.
    /// - Remark: Generated from `#/paths//fd/abl/get(abl)`.
    func abl(_ input: Operations.abl.Input) async throws -> Operations.abl.Output
    /// Fetch the full contents of a story.
    ///
    /// Returns the full contents of a story.
    ///
    /// - Remark: HTTP `GET /fd/app-article-api`.
    /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)`.
    func app_hyphen_article_hyphen_api(_ input: Operations.app_hyphen_article_hyphen_api.Input) async throws -> Operations.app_hyphen_article_hyphen_api.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Fetch a BBC news page.
    ///
    /// Returns data for a page that returns a list of links to stories, or the contents of an individual story (deprecated). Examples include the "Home" tab, pages for specific topic categories.
    ///
    /// - Remark: HTTP `GET /fd/abl`.
    /// - Remark: Generated from `#/paths//fd/abl/get(abl)`.
    public func abl(
        query: Operations.abl.Input.Query,
        headers: Operations.abl.Input.Headers = .init()
    ) async throws -> Operations.abl.Output {
        try await abl(Operations.abl.Input(
            query: query,
            headers: headers
        ))
    }
    /// Fetch the full contents of a story.
    ///
    /// Returns the full contents of a story.
    ///
    /// - Remark: HTTP `GET /fd/app-article-api`.
    /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)`.
    public func app_hyphen_article_hyphen_api(
        query: Operations.app_hyphen_article_hyphen_api.Input.Query,
        headers: Operations.app_hyphen_article_hyphen_api.Input.Headers = .init()
    ) async throws -> Operations.app_hyphen_article_hyphen_api.Output {
        try await app_hyphen_article_hyphen_api(Operations.app_hyphen_article_hyphen_api.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://news-app.api.bbc.co.uk",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// The metadata of a page of results returned by the API.
        ///
        /// - Remark: Generated from `#/components/schemas/FDDataMetadata`.
        public struct FDDataMetadata: Codable, Hashable, Sendable {
            /// The name of the page to display to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/FDDataMetadata/name`.
            public var name: Swift.String
            /// If the page allows advertising to be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/FDDataMetadata/allowAdvertising`.
            public var allowAdvertising: Swift.Bool
            /// The 64-bit timestamp of the last time the page was updated. This is always `0` for story discovery pages.
            ///
            /// - Remark: Generated from `#/components/schemas/FDDataMetadata/lastUpdated`.
            public var lastUpdated: Swift.Int64
            /// The URL of a webpage displaying the same page returned by the API.
            ///
            /// - Remark: Generated from `#/components/schemas/FDDataMetadata/shareUrl`.
            public var shareUrl: Swift.String?
            /// Creates a new `FDDataMetadata`.
            ///
            /// - Parameters:
            ///   - name: The name of the page to display to the user.
            ///   - allowAdvertising: If the page allows advertising to be displayed.
            ///   - lastUpdated: The 64-bit timestamp of the last time the page was updated. This is always `0` for story discovery pages.
            ///   - shareUrl: The URL of a webpage displaying the same page returned by the API.
            public init(
                name: Swift.String,
                allowAdvertising: Swift.Bool,
                lastUpdated: Swift.Int64,
                shareUrl: Swift.String? = nil
            ) {
                self.name = name
                self.allowAdvertising = allowAdvertising
                self.lastUpdated = lastUpdated
                self.shareUrl = shareUrl
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case allowAdvertising
                case lastUpdated
                case shareUrl
            }
        }
        /// A link to a new page(s).
        ///
        /// - Remark: Generated from `#/components/schemas/FDLink`.
        public struct FDLink: Codable, Hashable, Sendable {
            /// The destination(s) of the link.
            ///
            /// - Remark: Generated from `#/components/schemas/FDLink/destinations`.
            public var destinations: [Components.Schemas.FDLinkDestination] {
                get  {
                    storage.value.destinations
                }
                _modify {
                    yield &storage.value.destinations
                }
            }
            /// - Remark: Generated from `#/components/schemas/FDLink/trackers`.
            public var trackers: [Components.Schemas.FDTracker] {
                get  {
                    storage.value.trackers
                }
                _modify {
                    yield &storage.value.trackers
                }
            }
            /// Creates a new `FDLink`.
            ///
            /// - Parameters:
            ///   - destinations: The destination(s) of the link.
            ///   - trackers:
            public init(
                destinations: [Components.Schemas.FDLinkDestination],
                trackers: [Components.Schemas.FDTracker]
            ) {
                storage = .init(value: .init(
                    destinations: destinations,
                    trackers: trackers
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case destinations
                case trackers
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// The destination(s) of the link.
                ///
                /// - Remark: Generated from `#/components/schemas/FDLink/destinations`.
                var destinations: [Components.Schemas.FDLinkDestination]
                /// - Remark: Generated from `#/components/schemas/FDLink/trackers`.
                var trackers: [Components.Schemas.FDTracker]
                init(
                    destinations: [Components.Schemas.FDLinkDestination],
                    trackers: [Components.Schemas.FDTracker]
                ) {
                    self.destinations = destinations
                    self.trackers = trackers
                }
                typealias CodingKeys = Components.Schemas.FDLink.CodingKeys
            }
        }
        /// A description of how a page should be presented to a user.
        ///
        /// - Remark: Generated from `#/components/schemas/FDPresentation`.
        public struct FDPresentation: Codable, Hashable, Sendable {
            /// The type of presentation format for the page.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case WEB = "WEB"
                case SINGLE_RENDERER = "SINGLE_RENDERER"
                case MULTIPLE_RENDERER = "MULTIPLE_RENDERER"
                case NO_PADDING = "NO_PADDING"
                case VERTICAL_VIDEO = "VERTICAL_VIDEO"
            }
            /// The type of presentation format for the page.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/type`.
            public var _type: Components.Schemas.FDPresentation._typePayload
            /// The title of the page to be presented.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/title`.
            public var title: Swift.String?
            /// If the user can be shown a share URL to that the displayed content in web form.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/canShare`.
            public var canShare: Swift.Bool?
            /// A description of where the linked page(s) are sourced from.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/contentSource`.
            @frozen public enum contentSourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BBC = "BBC"
                case EXTERNAL = "EXTERNAL"
            }
            /// A description of where the linked page(s) are sourced from.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/contentSource`.
            public var contentSource: Components.Schemas.FDPresentation.contentSourcePayload?
            /// A further set of links referenced by a MULTIPLE_RENDERER presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/FDPresentation/renderLinks`.
            public var renderLinks: [Components.Schemas.FDLink]?
            /// Creates a new `FDPresentation`.
            ///
            /// - Parameters:
            ///   - _type: The type of presentation format for the page.
            ///   - title: The title of the page to be presented.
            ///   - canShare: If the user can be shown a share URL to that the displayed content in web form.
            ///   - contentSource: A description of where the linked page(s) are sourced from.
            ///   - renderLinks: A further set of links referenced by a MULTIPLE_RENDERER presentation.
            public init(
                _type: Components.Schemas.FDPresentation._typePayload,
                title: Swift.String? = nil,
                canShare: Swift.Bool? = nil,
                contentSource: Components.Schemas.FDPresentation.contentSourcePayload? = nil,
                renderLinks: [Components.Schemas.FDLink]? = nil
            ) {
                self._type = _type
                self.title = title
                self.canShare = canShare
                self.contentSource = contentSource
                self.renderLinks = renderLinks
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case canShare
                case contentSource
                case renderLinks
            }
        }
        /// A destination of a link.
        ///
        /// - Remark: Generated from `#/components/schemas/FDLinkDestination`.
        public struct FDLinkDestination: Codable, Hashable, Sendable {
            /// The format of the destination.
            ///
            /// - Remark: Generated from `#/components/schemas/FDLinkDestination/sourceFormat`.
            @frozen public enum sourceFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ABL = "ABL"
                case HTML = "HTML"
            }
            /// The format of the destination.
            ///
            /// - Remark: Generated from `#/components/schemas/FDLinkDestination/sourceFormat`.
            public var sourceFormat: Components.Schemas.FDLinkDestination.sourceFormatPayload
            /// The URL being linked to.
            ///
            /// - Remark: Generated from `#/components/schemas/FDLinkDestination/url`.
            public var url: Swift.String
            /// The id of the destination being linked to. This may sometimes be the same as `url`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDLinkDestination/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDLinkDestination/presentation`.
            public var presentation: Components.Schemas.FDPresentation
            /// Creates a new `FDLinkDestination`.
            ///
            /// - Parameters:
            ///   - sourceFormat: The format of the destination.
            ///   - url: The URL being linked to.
            ///   - id: The id of the destination being linked to. This may sometimes be the same as `url`.
            ///   - presentation:
            public init(
                sourceFormat: Components.Schemas.FDLinkDestination.sourceFormatPayload,
                url: Swift.String,
                id: Swift.String,
                presentation: Components.Schemas.FDPresentation
            ) {
                self.sourceFormat = sourceFormat
                self.url = url
                self.id = id
                self.presentation = presentation
            }
            public enum CodingKeys: String, CodingKey {
                case sourceFormat
                case url
                case id
                case presentation
            }
        }
        /// A payload of a tracker event.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTrackerPayload`.
        public struct FDTrackerPayload: Codable, Hashable, Sendable {
            /// The URL or ID of the payload.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/id`.
            public var id: Swift.String?
            /// The name of the payload.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/name`.
            public var name: Swift.String?
            /// The title of the page content represented by the payload.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/page_title`.
            public var page_title: Swift.String?
            /// The section that the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/section`.
            public var section: Swift.String?
            /// The sections that the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/sections`.
            public var sections: Swift.String?
            /// The uniform resource name of the content.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/uasToken`.
            public var uasToken: Swift.String?
            /// The uniform resource name of the content.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/bbc_content_id`.
            public var bbc_content_id: Swift.String?
            /// The service or brand of the content the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/bbc_producer`.
            public var bbc_producer: Swift.String?
            /// The type of content that the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/bbc_content_type`.
            public var bbc_content_type: Swift.String?
            /// The type of the action the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/action_type`.
            public var action_type: Swift.String?
            /// The name of the action the payload represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackerPayload/action_name`.
            public var action_name: Swift.String?
            /// Creates a new `FDTrackerPayload`.
            ///
            /// - Parameters:
            ///   - id: The URL or ID of the payload.
            ///   - name: The name of the payload.
            ///   - page_title: The title of the page content represented by the payload.
            ///   - section: The section that the payload represents.
            ///   - sections: The sections that the payload represents.
            ///   - uasToken: The uniform resource name of the content.
            ///   - bbc_content_id: The uniform resource name of the content.
            ///   - bbc_producer: The service or brand of the content the payload represents.
            ///   - bbc_content_type: The type of content that the payload represents.
            ///   - action_type: The type of the action the payload represents.
            ///   - action_name: The name of the action the payload represents.
            public init(
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                page_title: Swift.String? = nil,
                section: Swift.String? = nil,
                sections: Swift.String? = nil,
                uasToken: Swift.String? = nil,
                bbc_content_id: Swift.String? = nil,
                bbc_producer: Swift.String? = nil,
                bbc_content_type: Swift.String? = nil,
                action_type: Swift.String? = nil,
                action_name: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.page_title = page_title
                self.section = section
                self.sections = sections
                self.uasToken = uasToken
                self.bbc_content_id = bbc_content_id
                self.bbc_producer = bbc_producer
                self.bbc_content_type = bbc_content_type
                self.action_type = action_type
                self.action_name = action_name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case page_title
                case section
                case sections
                case uasToken
                case bbc_content_id
                case bbc_producer
                case bbc_content_type
                case action_type
                case action_name
            }
        }
        /// A analytics event that should be tracked.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTracker`.
        public struct FDTracker: Codable, Hashable, Sendable {
            /// The type of the event to track.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTracker/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDTracker/payload`.
            public var payload: Components.Schemas.FDTrackerPayload
            /// Creates a new `FDTracker`.
            ///
            /// - Parameters:
            ///   - _type: The type of the event to track.
            ///   - payload:
            public init(
                _type: Swift.String,
                payload: Components.Schemas.FDTrackerPayload
            ) {
                self._type = _type
                self.payload = payload
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case payload
            }
        }
        /// A topic that a story can relate to.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTopic`.
        public struct FDTopic: Codable, Hashable, Sendable {
            /// The name of the topic. This is never used alongside `title`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTopic/text`.
            public var text: Swift.String?
            /// The name of the topic. This is never used alongside `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTopic/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FDTopic/link`.
            public var link: Components.Schemas.FDLink?
            /// Creates a new `FDTopic`.
            ///
            /// - Parameters:
            ///   - text: The name of the topic. This is never used alongside `title`.
            ///   - title: The name of the topic. This is never used alongside `text`.
            ///   - link:
            public init(
                text: Swift.String? = nil,
                title: Swift.String? = nil,
                link: Components.Schemas.FDLink? = nil
            ) {
                self.text = text
                self.title = title
                self.link = link
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case title
                case link
            }
        }
        /// A definition of how to fetch the correct size of the image.
        ///
        /// - Remark: Generated from `#/components/schemas/FDImageSizingMethod`.
        public struct FDImageSizingMethod: Codable, Hashable, Sendable {
            /// The type of sizing method used. `"SPECIFIC_WIDTHS"` defines a placeholder token in a URL, which can be substituted with a specified list of widths. `"NO_WIDTH"` supports only a single width, which is hardcoded into a URL.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSizingMethod/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SPECIFIC_WIDTHS = "SPECIFIC_WIDTHS"
                case NO_WIDTH = "NO_WIDTH"
            }
            /// The type of sizing method used. `"SPECIFIC_WIDTHS"` defines a placeholder token in a URL, which can be substituted with a specified list of widths. `"NO_WIDTH"` supports only a single width, which is hardcoded into a URL.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSizingMethod/type`.
            public var _type: Components.Schemas.FDImageSizingMethod._typePayload
            /// The token in the URL where the chosen width should be defined. This is used when `type` is `"SPECIFIC_WIDTHS"`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSizingMethod/widthToken`.
            public var widthToken: Swift.String?
            /// The fixed options of widths that can we used to substitute in place of the width token. This is used when `type` is `"SPECIFIC_WIDTHS"`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSizingMethod/widths`.
            public var widths: [Swift.Int32]?
            /// Creates a new `FDImageSizingMethod`.
            ///
            /// - Parameters:
            ///   - _type: The type of sizing method used. `"SPECIFIC_WIDTHS"` defines a placeholder token in a URL, which can be substituted with a specified list of widths. `"NO_WIDTH"` supports only a single width, which is hardcoded into a URL.
            ///   - widthToken: The token in the URL where the chosen width should be defined. This is used when `type` is `"SPECIFIC_WIDTHS"`.
            ///   - widths: The fixed options of widths that can we used to substitute in place of the width token. This is used when `type` is `"SPECIFIC_WIDTHS"`.
            public init(
                _type: Components.Schemas.FDImageSizingMethod._typePayload,
                widthToken: Swift.String? = nil,
                widths: [Swift.Int32]? = nil
            ) {
                self._type = _type
                self.widthToken = widthToken
                self.widths = widths
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case widthToken
                case widths
            }
        }
        /// The remote source for an image.
        ///
        /// - Remark: Generated from `#/components/schemas/FDImageSource`.
        public struct FDImageSource: Codable, Hashable, Sendable {
            /// The URL that the image is located.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSource/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDImageSource/sizingMethod`.
            public var sizingMethod: Components.Schemas.FDImageSizingMethod
            /// The aspect ratio of the image.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageSource/aspectRatio`.
            public var aspectRatio: Swift.Double?
            /// Creates a new `FDImageSource`.
            ///
            /// - Parameters:
            ///   - url: The URL that the image is located.
            ///   - sizingMethod:
            ///   - aspectRatio: The aspect ratio of the image.
            public init(
                url: Swift.String,
                sizingMethod: Components.Schemas.FDImageSizingMethod,
                aspectRatio: Swift.Double? = nil
            ) {
                self.url = url
                self.sizingMethod = sizingMethod
                self.aspectRatio = aspectRatio
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case sizingMethod
                case aspectRatio
            }
        }
        /// Metadata descriptions of an image.
        ///
        /// - Remark: Generated from `#/components/schemas/FDImageMetadata`.
        public struct FDImageMetadata: Codable, Hashable, Sendable {
            /// A textual description of an image, to be used as alternative text in place of the image.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageMetadata/altText`.
            public var altText: Swift.String?
            /// A caption to display with the image.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageMetadata/caption`.
            public var caption: Swift.String?
            /// A copyright attribution for the image.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageMetadata/copyrightText`.
            public var copyrightText: Swift.String?
            /// Creates a new `FDImageMetadata`.
            ///
            /// - Parameters:
            ///   - altText: A textual description of an image, to be used as alternative text in place of the image.
            ///   - caption: A caption to display with the image.
            ///   - copyrightText: A copyright attribution for the image.
            public init(
                altText: Swift.String? = nil,
                caption: Swift.String? = nil,
                copyrightText: Swift.String? = nil
            ) {
                self.altText = altText
                self.caption = caption
                self.copyrightText = copyrightText
            }
            public enum CodingKeys: String, CodingKey {
                case altText
                case caption
                case copyrightText
            }
        }
        /// An image to be displayed.
        ///
        /// - Remark: Generated from `#/components/schemas/FDImage`.
        public struct FDImage: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `Image`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImage/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Image = "Image"
            }
            /// Used for decoding `FDItem`. This is always `Image`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImage/type`.
            public var _type: Components.Schemas.FDImage._typePayload
            /// - Remark: Generated from `#/components/schemas/FDImage/source`.
            public var source: Components.Schemas.FDImageSource
            /// - Remark: Generated from `#/components/schemas/FDImage/metadata`.
            public var metadata: Components.Schemas.FDImageMetadata?
            /// Creates a new `FDImage`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `Image`.
            ///   - source:
            ///   - metadata:
            public init(
                _type: Components.Schemas.FDImage._typePayload,
                source: Components.Schemas.FDImageSource,
                metadata: Components.Schemas.FDImageMetadata? = nil
            ) {
                self._type = _type
                self.source = source
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case source
                case metadata
            }
        }
        /// A visual badge to tag a story with.
        ///
        /// - Remark: Generated from `#/components/schemas/FDBadge`.
        public struct FDBadge: Codable, Hashable, Sendable {
            /// The type of the badge.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case LIVE = "LIVE"
                case BREAKING = "BREAKING"
                case VIDEO = "VIDEO"
                case AUDIO = "AUDIO"
                case ORDERED = "ORDERED"
            }
            /// The type of the badge.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/type`.
            public var _type: Components.Schemas.FDBadge._typePayload
            /// The brand the badge represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/brand`.
            @frozen public enum brandPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NEWS = "NEWS"
                case SPORT = "SPORT"
                case DEFAULT = "DEFAULT"
            }
            /// The brand the badge represents.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/brand`.
            public var brand: Components.Schemas.FDBadge.brandPayload
            /// The text displayed within the badge.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/text`.
            public var text: Swift.String?
            /// The time duration of the media described, represented in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBadge/duration`.
            public var duration: Swift.Int64?
            /// Creates a new `FDBadge`.
            ///
            /// - Parameters:
            ///   - _type: The type of the badge.
            ///   - brand: The brand the badge represents.
            ///   - text: The text displayed within the badge.
            ///   - duration: The time duration of the media described, represented in milliseconds.
            public init(
                _type: Components.Schemas.FDBadge._typePayload,
                brand: Components.Schemas.FDBadge.brandPayload,
                text: Swift.String? = nil,
                duration: Swift.Int64? = nil
            ) {
                self._type = _type
                self.brand = brand
                self.text = text
                self.duration = duration
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case brand
                case text
                case duration
            }
        }
        /// A promo description that links to a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDStoryPromo`.
        public struct FDStoryPromo: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `StoryPromo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case StoryPromo = "StoryPromo"
            }
            /// Used for decoding `FDItem`. This is always `StoryPromo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/type`.
            public var _type: Components.Schemas.FDStoryPromo._typePayload
            /// The style in which the promo should be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/style`.
            @frozen public enum stylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BADGE_LED_PROMO_CARD = "BADGE_LED_PROMO_CARD"
                case EMPHASISED_PROMO_CARD = "EMPHASISED_PROMO_CARD"
                case GALLERY_PROMO_CARD = "GALLERY_PROMO_CARD"
                case HERO_PROMO_CARD = "HERO_PROMO_CARD"
                case HIGHLIGHTED_PROMO_CARD = "HIGHLIGHTED_PROMO_CARD"
                case IMAGE_LED_PROMO_CARD = "IMAGE_LED_PROMO_CARD"
                case IMPACTFUL_TEXT_PROMO_CARD = "IMPACTFUL_TEXT_PROMO_CARD"
                case LARGE_PROMO_CARD = "LARGE_PROMO_CARD"
                case PORTRAIT_PROMO_CARD = "PORTRAIT_PROMO_CARD"
                case SMALL_CAROUSEL_PROMO_CARD = "SMALL_CAROUSEL_PROMO_CARD"
                case SMALL_HORIZONTAL_PROMO_CARD = "SMALL_HORIZONTAL_PROMO_CARD"
                case SMALL_VERTICAL_PROMO_CARD = "SMALL_VERTICAL_PROMO_CARD"
                case SQUARE_PROMO_CARD = "SQUARE_PROMO_CARD"
                case SQUARE_TEXT_OVER_IMAGE_PROMO_CARD = "SQUARE_TEXT_OVER_IMAGE_PROMO_CARD"
                case TEXT_PROMO_CARD = "TEXT_PROMO_CARD"
                case VIDEO_PACKAGE_PROMO_CARD = "VIDEO_PACKAGE_PROMO_CARD"
            }
            /// The style in which the promo should be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/style`.
            public var style: Components.Schemas.FDStoryPromo.stylePayload
            /// The ISO 639-1 language code of the language used in the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/languageCode`.
            public var languageCode: Swift.String
            /// The title of the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/text`.
            public var text: Swift.String?
            /// The subtext of the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/subtext`.
            public var subtext: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/link`.
            public var link: Components.Schemas.FDLink
            /// The 64-bit timestamp of the time the story was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/updated`.
            public var updated: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/topic`.
            public var topic: Components.Schemas.FDTopic?
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/image`.
            public var image: Components.Schemas.FDImage?
            /// A list of badges that relate to the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/badges`.
            public var badges: [Components.Schemas.FDBadge]?
            /// The internal uniform resource name of the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDStoryPromo/uasToken`.
            public var uasToken: Swift.String?
            /// Creates a new `FDStoryPromo`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `StoryPromo`.
            ///   - style: The style in which the promo should be displayed.
            ///   - languageCode: The ISO 639-1 language code of the language used in the story.
            ///   - text: The title of the story.
            ///   - subtext: The subtext of the story.
            ///   - link:
            ///   - updated: The 64-bit timestamp of the time the story was last updated.
            ///   - topic:
            ///   - image:
            ///   - badges: A list of badges that relate to the story.
            ///   - uasToken: The internal uniform resource name of the story.
            public init(
                _type: Components.Schemas.FDStoryPromo._typePayload,
                style: Components.Schemas.FDStoryPromo.stylePayload,
                languageCode: Swift.String,
                text: Swift.String? = nil,
                subtext: Swift.String? = nil,
                link: Components.Schemas.FDLink,
                updated: Swift.Int64? = nil,
                topic: Components.Schemas.FDTopic? = nil,
                image: Components.Schemas.FDImage? = nil,
                badges: [Components.Schemas.FDBadge]? = nil,
                uasToken: Swift.String? = nil
            ) {
                self._type = _type
                self.style = style
                self.languageCode = languageCode
                self.text = text
                self.subtext = subtext
                self.link = link
                self.updated = updated
                self.topic = topic
                self.image = image
                self.badges = badges
                self.uasToken = uasToken
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case style
                case languageCode
                case text
                case subtext
                case link
                case updated
                case topic
                case image
                case badges
                case uasToken
            }
        }
        /// A collection containing a single story promo that is displayed with the highest prominence at the top of a story discovery page.
        ///
        /// - Remark: Generated from `#/components/schemas/FDBillboard`.
        public struct FDBillboard: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBillboard/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Billboard = "Billboard"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBillboard/type`.
            public var _type: Components.Schemas.FDBillboard._typePayload
            /// The story promo(s) to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBillboard/items`.
            public var items: [Components.Schemas.FDStoryPromo]
            /// Creates a new `FDBillboard`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The story promo(s) to be displayed in the collection.
            public init(
                _type: Components.Schemas.FDBillboard._typePayload,
                items: [Components.Schemas.FDStoryPromo]
            ) {
                self._type = _type
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
            }
        }
        /// A collection of story promos that should be displayed with inflated prominence.
        ///
        /// - Remark: Generated from `#/components/schemas/FDHierarchicalCollection`.
        public struct FDHierarchicalCollection: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHierarchicalCollection/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case HierarchicalCollection = "HierarchicalCollection"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHierarchicalCollection/type`.
            public var _type: Components.Schemas.FDHierarchicalCollection._typePayload
            /// The story promos to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHierarchicalCollection/items`.
            public var items: [Components.Schemas.FDStoryPromo]
            /// Creates a new `FDHierarchicalCollection`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The story promos to be displayed in the collection.
            public init(
                _type: Components.Schemas.FDHierarchicalCollection._typePayload,
                items: [Components.Schemas.FDStoryPromo]
            ) {
                self._type = _type
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
            }
        }
        /// A header for a story promo collection.
        ///
        /// - Remark: Generated from `#/components/schemas/FDCollectionHeader`.
        public struct FDCollectionHeader: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCollectionHeader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CollectionHeader = "CollectionHeader"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCollectionHeader/type`.
            public var _type: Components.Schemas.FDCollectionHeader._typePayload
            /// The story promos to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCollectionHeader/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDCollectionHeader/link`.
            public var link: Components.Schemas.FDLink?
            /// Creates a new `FDCollectionHeader`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - text: The story promos to be displayed in the collection.
            ///   - link:
            public init(
                _type: Components.Schemas.FDCollectionHeader._typePayload,
                text: Swift.String,
                link: Components.Schemas.FDLink? = nil
            ) {
                self._type = _type
                self.text = text
                self.link = link
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case link
            }
        }
        /// A collection of story promos that should be displayed with standard prominence.
        ///
        /// - Remark: Generated from `#/components/schemas/FDSimpleCollection`.
        public struct FDSimpleCollection: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimpleCollection/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SimpleCollection = "SimpleCollection"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimpleCollection/type`.
            public var _type: Components.Schemas.FDSimpleCollection._typePayload
            /// The story promos to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimpleCollection/items`.
            public var items: [Components.Schemas.FDStoryPromo]
            /// Creates a new `FDSimpleCollection`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The story promos to be displayed in the collection.
            public init(
                _type: Components.Schemas.FDSimpleCollection._typePayload,
                items: [Components.Schemas.FDStoryPromo]
            ) {
                self._type = _type
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
            }
        }
        /// A collection of story promos that should be displayed as a grid.
        ///
        /// - Remark: Generated from `#/components/schemas/FDSimplePromoGrid`.
        public struct FDSimplePromoGrid: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimplePromoGrid/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SimplePromoGrid = "SimplePromoGrid"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimplePromoGrid/type`.
            public var _type: Components.Schemas.FDSimplePromoGrid._typePayload
            /// The story promos to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSimplePromoGrid/items`.
            public var items: [Components.Schemas.FDStoryPromo]
            /// Creates a new `FDSimplePromoGrid`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The story promos to be displayed in the collection.
            public init(
                _type: Components.Schemas.FDSimplePromoGrid._typePayload,
                items: [Components.Schemas.FDStoryPromo]
            ) {
                self._type = _type
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
            }
        }
        /// A location being described by a weather forecast.
        ///
        /// - Remark: Generated from `#/components/schemas/FDWeatherLocation`.
        public struct FDWeatherLocation: Codable, Hashable, Sendable {
            /// The display name of the location being described. This is typically the first half of the UK postcode for the location.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherLocation/name`.
            public var name: Swift.String
            /// If the location being described the is the same as the user's current location.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherLocation/isCurrentLocation`.
            public var isCurrentLocation: Swift.Bool
            /// Creates a new `FDWeatherLocation`.
            ///
            /// - Parameters:
            ///   - name: The display name of the location being described. This is typically the first half of the UK postcode for the location.
            ///   - isCurrentLocation: If the location being described the is the same as the user's current location.
            public init(
                name: Swift.String,
                isCurrentLocation: Swift.Bool
            ) {
                self.name = name
                self.isCurrentLocation = isCurrentLocation
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case isCurrentLocation
            }
        }
        /// A representation of a temperate in a weather forecast.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTemperature`.
        public struct FDTemperature: Codable, Hashable, Sendable {
            /// The temperate value, represented in celsius.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTemperature/celsius`.
            public var celsius: Swift.Int
            /// Creates a new `FDTemperature`.
            ///
            /// - Parameters:
            ///   - celsius: The temperate value, represented in celsius.
            public init(celsius: Swift.Int) {
                self.celsius = celsius
            }
            public enum CodingKeys: String, CodingKey {
                case celsius
            }
        }
        /// A weather description of a forecast prediction.
        ///
        /// - Remark: Generated from `#/components/schemas/FDWeatherForecast`.
        public struct FDWeatherForecast: Codable, Hashable, Sendable {
            /// The short, textual description of the forecast.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/high`.
            public var high: Components.Schemas.FDTemperature
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/low`.
            public var low: Components.Schemas.FDTemperature
            /// The identifier of the weather icon to be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/icon`.
            @frozen public enum iconPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SLEET_SHOWER = "SLEET_SHOWER"
                case THUNDERSTORM = "THUNDERSTORM"
                case HAIL = "HAIL"
                case HAIL_SHOWER = "HAIL_SHOWER"
                case HAIL_SHOWER_NIGHT = "HAIL_SHOWER_NIGHT"
                case MIST = "MIST"
                case SLEET = "SLEET"
                case SLEET_SHOWER_NIGHT = "SLEET_SHOWER_NIGHT"
                case SUNNY = "SUNNY"
                case SUNNY_INTERVALS = "SUNNY_INTERVALS"
                case THUNDERY_SHOWER = "THUNDERY_SHOWER"
                case THUNDERY_SHOWER_NIGHT = "THUNDERY_SHOWER_NIGHT"
                case HEAVY_RAIN = "HEAVY_RAIN"
                case HEAVY_RAIN_SHOWER = "HEAVY_RAIN_SHOWER"
                case HEAVY_RAIN_SHOWER_NIGHT = "HEAVY_RAIN_SHOWER_NIGHT"
                case HEAVY_SNOW = "HEAVY_SNOW"
                case HEAVY_SNOW_SHOWER = "HEAVY_SNOW_SHOWER"
                case HEAVY_SNOW_SHOWER_NIGHT = "HEAVY_SNOW_SHOWER_NIGHT"
                case LIGHT_RAIN = "LIGHT_RAIN"
                case LIGHT_RAIN_SHOWER = "LIGHT_RAIN_SHOWER"
                case LIGHT_RAIN_SHOWER_NIGHT = "LIGHT_RAIN_SHOWER_NIGHT"
                case LIGHT_SNOW = "LIGHT_SNOW"
                case LIGHT_SNOW_SHOWER = "LIGHT_SNOW_SHOWER"
                case LIGHT_SNOW_SHOWER_NIGHT = "LIGHT_SNOW_SHOWER_NIGHT"
                case LIGHT_SOURCE_CLOUDY_WEATHER = "LIGHT_SOURCE_CLOUDY_WEATHER"
                case PARTLY_CLOUDY = "PARTLY_CLOUDY"
                case SANDSTORM = "SANDSTORM"
                case TROPICAL_STORM = "TROPICAL_STORM"
            }
            /// The identifier of the weather icon to be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/icon`.
            public var icon: Components.Schemas.FDWeatherForecast.iconPayload
            /// If the forecast should be displayed to the user in a night-time specific layout.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherForecast/nighttimeLayout`.
            public var nighttimeLayout: Swift.Bool
            /// Creates a new `FDWeatherForecast`.
            ///
            /// - Parameters:
            ///   - description: The short, textual description of the forecast.
            ///   - high:
            ///   - low:
            ///   - icon: The identifier of the weather icon to be displayed.
            ///   - nighttimeLayout: If the forecast should be displayed to the user in a night-time specific layout.
            public init(
                description: Swift.String,
                high: Components.Schemas.FDTemperature,
                low: Components.Schemas.FDTemperature,
                icon: Components.Schemas.FDWeatherForecast.iconPayload,
                nighttimeLayout: Swift.Bool
            ) {
                self.description = description
                self.high = high
                self.low = low
                self.icon = icon
                self.nighttimeLayout = nighttimeLayout
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case high
                case low
                case icon
                case nighttimeLayout
            }
        }
        /// A promo summary for the weather forecast.
        ///
        /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary`.
        public struct FDWeatherPromoSummary: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case WeatherPromoSummary = "WeatherPromoSummary"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary/type`.
            public var _type: Components.Schemas.FDWeatherPromoSummary._typePayload
            /// The textual description of the time period covered by the forecast.
            ///
            /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary/period`.
            public var period: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary/location`.
            public var location: Components.Schemas.FDWeatherLocation?
            /// - Remark: Generated from `#/components/schemas/FDWeatherPromoSummary/forecast`.
            public var forecast: Components.Schemas.FDWeatherForecast?
            /// Creates a new `FDWeatherPromoSummary`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - period: The textual description of the time period covered by the forecast.
            ///   - location:
            ///   - forecast:
            public init(
                _type: Components.Schemas.FDWeatherPromoSummary._typePayload,
                period: Swift.String? = nil,
                location: Components.Schemas.FDWeatherLocation? = nil,
                forecast: Components.Schemas.FDWeatherForecast? = nil
            ) {
                self._type = _type
                self.period = period
                self.location = location
                self.forecast = forecast
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case period
                case location
                case forecast
            }
        }
        /// A collection of story promos that should be displayed as a scrollable carousel.
        ///
        /// - Remark: Generated from `#/components/schemas/FDCarousel`.
        public struct FDCarousel: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCarousel/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Carousel = "Carousel"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCarousel/type`.
            public var _type: Components.Schemas.FDCarousel._typePayload
            /// The story promos to be displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCarousel/items`.
            public var items: [Components.Schemas.FDStoryPromo]
            /// The aspect ratio of each promo displayed in the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCarousel/aspectRatio`.
            public var aspectRatio: Swift.Double
            /// - Remark: Generated from `#/components/schemas/FDCarousel/presentation`.
            public var presentation: Components.Schemas.FDPresentation
            /// If page indicators be displayed for each item in the carousel.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCarousel/hasPageIndicator`.
            public var hasPageIndicator: Swift.Bool
            /// Creates a new `FDCarousel`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The story promos to be displayed in the collection.
            ///   - aspectRatio: The aspect ratio of each promo displayed in the collection.
            ///   - presentation:
            ///   - hasPageIndicator: If page indicators be displayed for each item in the carousel.
            public init(
                _type: Components.Schemas.FDCarousel._typePayload,
                items: [Components.Schemas.FDStoryPromo],
                aspectRatio: Swift.Double,
                presentation: Components.Schemas.FDPresentation,
                hasPageIndicator: Swift.Bool
            ) {
                self._type = _type
                self.items = items
                self.aspectRatio = aspectRatio
                self.presentation = presentation
                self.hasPageIndicator = hasPageIndicator
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
                case aspectRatio
                case presentation
                case hasPageIndicator
            }
        }
        /// A remote source for a playable media item.
        ///
        /// - Remark: Generated from `#/components/schemas/FDMediaSource`.
        public struct FDMediaSource: Codable, Hashable, Sendable {
            /// The type of the media.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case VIDEO = "VIDEO"
                case AUDIO = "AUDIO"
            }
            /// The type of the media.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/type`.
            public var _type: Components.Schemas.FDMediaSource._typePayload
            /// The identifier of the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/id`.
            public var id: Swift.String
            /// The duration of the media item, in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/duration`.
            public var duration: Swift.Int64
            /// The aspect ratio of the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/aspectRatio`.
            public var aspectRatio: Swift.Double
            /// If the media item is a live broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/isLive`.
            public var isLive: Swift.Bool
            /// If the media item should be allowed to start playing without user interaction.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/canAutoPlay`.
            public var canAutoPlay: Swift.Bool
            /// The identifier of the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaSource/episodePid`.
            public var episodePid: Swift.String?
            /// Creates a new `FDMediaSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of the media.
            ///   - id: The identifier of the media item.
            ///   - duration: The duration of the media item, in milliseconds.
            ///   - aspectRatio: The aspect ratio of the media item.
            ///   - isLive: If the media item is a live broadcast.
            ///   - canAutoPlay: If the media item should be allowed to start playing without user interaction.
            ///   - episodePid: The identifier of the media item.
            public init(
                _type: Components.Schemas.FDMediaSource._typePayload,
                id: Swift.String,
                duration: Swift.Int64,
                aspectRatio: Swift.Double,
                isLive: Swift.Bool,
                canAutoPlay: Swift.Bool,
                episodePid: Swift.String? = nil
            ) {
                self._type = _type
                self.id = id
                self.duration = duration
                self.aspectRatio = aspectRatio
                self.isLive = isLive
                self.canAutoPlay = canAutoPlay
                self.episodePid = episodePid
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case duration
                case aspectRatio
                case isLive
                case canAutoPlay
                case episodePid
            }
        }
        /// The annotated text contents of a text paragraph displayed in a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDAttributedText`.
        public struct FDAttributedText: Codable, Hashable, Sendable {
            /// The type of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case link = "link"
                case emphasis = "emphasis"
            }
            /// The type of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/type`.
            public var _type: Components.Schemas.FDAttributedText._typePayload
            /// The start index of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/startIndex`.
            public var startIndex: Swift.Int32
            /// The number of characters that the span applied for.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/length`.
            public var length: Swift.Int32
            /// The type of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/attribute`.
            @frozen public enum attributePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bold = "bold"
                case italic = "italic"
            }
            /// The type of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/attribute`.
            public var attribute: Components.Schemas.FDAttributedText.attributePayload?
            /// - Remark: Generated from `#/components/schemas/FDAttributedText/link`.
            public var link: Components.Schemas.FDLink?
            /// Creates a new `FDAttributedText`.
            ///
            /// - Parameters:
            ///   - _type: The type of the span.
            ///   - startIndex: The start index of the span.
            ///   - length: The number of characters that the span applied for.
            ///   - attribute: The type of the span.
            ///   - link:
            public init(
                _type: Components.Schemas.FDAttributedText._typePayload,
                startIndex: Swift.Int32,
                length: Swift.Int32,
                attribute: Components.Schemas.FDAttributedText.attributePayload? = nil,
                link: Components.Schemas.FDLink? = nil
            ) {
                self._type = _type
                self.startIndex = startIndex
                self.length = length
                self.attribute = attribute
                self.link = link
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case startIndex
                case length
                case attribute
                case link
            }
        }
        /// Metadata descriptions of a media item.
        ///
        /// - Remark: Generated from `#/components/schemas/FDMediaMetadata`.
        public struct FDMediaMetadata: Codable, Hashable, Sendable {
            /// The title of the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/title`.
            public var title: Swift.String
            /// A summary description of the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/summary`.
            public var summary: Swift.String?
            /// The caption to display with the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/caption`.
            public var caption: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/captionWithStyle`.
            public var captionWithStyle: Components.Schemas.FDAttributedText?
            /// The 64-bit timestamp of the time the media item was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/timestamp`.
            public var timestamp: Swift.Int64
            /// The guidance message for the video.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/guidanceMessage`.
            public var guidanceMessage: Swift.String?
            /// A URL that displays content associated to the media item. This can return a blank string when empty.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/associatedContentUrl`.
            public var associatedContentUrl: Swift.String?
            /// Is advertising allowed with the media item.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMediaMetadata/allowAdvertising`.
            public var allowAdvertising: Swift.Bool
            /// Creates a new `FDMediaMetadata`.
            ///
            /// - Parameters:
            ///   - title: The title of the media item.
            ///   - summary: A summary description of the media item.
            ///   - caption: The caption to display with the media item.
            ///   - captionWithStyle:
            ///   - timestamp: The 64-bit timestamp of the time the media item was last updated.
            ///   - guidanceMessage: The guidance message for the video.
            ///   - associatedContentUrl: A URL that displays content associated to the media item. This can return a blank string when empty.
            ///   - allowAdvertising: Is advertising allowed with the media item.
            public init(
                title: Swift.String,
                summary: Swift.String? = nil,
                caption: Swift.String? = nil,
                captionWithStyle: Components.Schemas.FDAttributedText? = nil,
                timestamp: Swift.Int64,
                guidanceMessage: Swift.String? = nil,
                associatedContentUrl: Swift.String? = nil,
                allowAdvertising: Swift.Bool
            ) {
                self.title = title
                self.summary = summary
                self.caption = caption
                self.captionWithStyle = captionWithStyle
                self.timestamp = timestamp
                self.guidanceMessage = guidanceMessage
                self.associatedContentUrl = associatedContentUrl
                self.allowAdvertising = allowAdvertising
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case summary
                case caption
                case captionWithStyle
                case timestamp
                case guidanceMessage
                case associatedContentUrl
                case allowAdvertising
            }
        }
        /// A media item to be played.
        ///
        /// - Remark: Generated from `#/components/schemas/FDMedia`.
        public struct FDMedia: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `Media`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMedia/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Media = "Media"
            }
            /// Used for decoding `FDItem`. This is always `Media`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDMedia/type`.
            public var _type: Components.Schemas.FDMedia._typePayload
            /// - Remark: Generated from `#/components/schemas/FDMedia/source`.
            public var source: Components.Schemas.FDMediaSource
            /// - Remark: Generated from `#/components/schemas/FDMedia/image`.
            public var image: Components.Schemas.FDImage
            /// - Remark: Generated from `#/components/schemas/FDMedia/metadata`.
            public var metadata: Components.Schemas.FDMediaMetadata
            /// Creates a new `FDMedia`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `Media`.
            ///   - source:
            ///   - image:
            ///   - metadata:
            public init(
                _type: Components.Schemas.FDMedia._typePayload,
                source: Components.Schemas.FDMediaSource,
                image: Components.Schemas.FDImage,
                metadata: Components.Schemas.FDMediaMetadata
            ) {
                self._type = _type
                self.source = source
                self.image = image
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case source
                case image
                case metadata
            }
        }
        /// A portrait video for a story that consists only of a single video.
        ///
        /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory`.
        public struct FDVideoPortraitStory: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case VideoPortraitStory = "VideoPortraitStory"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/type`.
            public var _type: Components.Schemas.FDVideoPortraitStory._typePayload
            /// The BBC pid of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/id`.
            public var id: Swift.String
            /// The URL of the poster image for the video story. This is deprecated in favour of `image` and will return a blank string.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/url`.
            public var url: Swift.String
            /// The title of the video story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/text`.
            public var text: Swift.String
            /// The short description of the video story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/subtext`.
            public var subtext: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/media`.
            public var media: Components.Schemas.FDMedia
            /// - Remark: Generated from `#/components/schemas/FDVideoPortraitStory/image`.
            public var image: Components.Schemas.FDImage?
            /// Creates a new `FDVideoPortraitStory`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - id: The BBC pid of the video.
            ///   - url: The URL of the poster image for the video story. This is deprecated in favour of `image` and will return a blank string.
            ///   - text: The title of the video story.
            ///   - subtext: The short description of the video story.
            ///   - media:
            ///   - image:
            public init(
                _type: Components.Schemas.FDVideoPortraitStory._typePayload,
                id: Swift.String,
                url: Swift.String,
                text: Swift.String,
                subtext: Swift.String,
                media: Components.Schemas.FDMedia,
                image: Components.Schemas.FDImage? = nil
            ) {
                self._type = _type
                self.id = id
                self.url = url
                self.text = text
                self.subtext = subtext
                self.media = media
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case url
                case text
                case subtext
                case media
                case image
            }
        }
        /// An event with an action that should be tracked.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTrackedEvent`.
        public struct FDTrackedEvent: Codable, Hashable, Sendable {
            /// The name of the event being tracked.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTrackedEvent/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDTrackedEvent/trackers`.
            public var trackers: [Components.Schemas.FDTracker]
            /// Creates a new `FDTrackedEvent`.
            ///
            /// - Parameters:
            ///   - event: The name of the event being tracked.
            ///   - trackers:
            public init(
                event: Swift.String,
                trackers: [Components.Schemas.FDTracker]
            ) {
                self.event = event
                self.trackers = trackers
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case trackers
            }
        }
        /// A button representing a topic.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTopicButton`.
        public struct FDTopicButton: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTopicButton/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case TopicButton = "TopicButton"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTopicButton/type`.
            public var _type: Components.Schemas.FDTopicButton._typePayload
            /// - Remark: Generated from `#/components/schemas/FDTopicButton/topic`.
            public var topic: Components.Schemas.FDTopic
            /// The internal uniform resource name of the topic represented by the button.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTopicButton/resourceId`.
            public var resourceId: Swift.String
            /// - Remark: Generated from `#/components/schemas/FDTopicButton/trackedEvents`.
            public var trackedEvents: Components.Schemas.FDTrackedEvent
            /// Creates a new `FDTopicButton`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - topic:
            ///   - resourceId: The internal uniform resource name of the topic represented by the button.
            ///   - trackedEvents:
            public init(
                _type: Components.Schemas.FDTopicButton._typePayload,
                topic: Components.Schemas.FDTopic,
                resourceId: Swift.String,
                trackedEvents: Components.Schemas.FDTrackedEvent
            ) {
                self._type = _type
                self.topic = topic
                self.resourceId = resourceId
                self.trackedEvents = trackedEvents
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case topic
                case resourceId
                case trackedEvents
            }
        }
        /// A collection of topics that should be displayed as a chip list.
        ///
        /// - Remark: Generated from `#/components/schemas/FDChipList`.
        public struct FDChipList: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDChipList/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ChipList = "ChipList"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDChipList/type`.
            public var _type: Components.Schemas.FDChipList._typePayload
            /// The topics to be displayed in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/FDChipList/items`.
            public var items: [Components.Schemas.FDTopic]
            /// Creates a new `FDChipList`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - items: The topics to be displayed in the list.
            public init(
                _type: Components.Schemas.FDChipList._typePayload,
                items: [Components.Schemas.FDTopic]
            ) {
                self._type = _type
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
            }
        }
        /// A description of a copyright claim for a piece of work.
        ///
        /// - Remark: Generated from `#/components/schemas/FDCopyright`.
        public struct FDCopyright: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCopyright/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Copyright = "Copyright"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCopyright/type`.
            public var _type: Components.Schemas.FDCopyright._typePayload
            /// The 64-bit timestamp of when the copyrighted work was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/FDCopyright/lastUpdated`.
            public var lastUpdated: Swift.Int64?
            /// Creates a new `FDCopyright`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - lastUpdated: The 64-bit timestamp of when the copyrighted work was last updated.
            public init(
                _type: Components.Schemas.FDCopyright._typePayload,
                lastUpdated: Swift.Int64? = nil
            ) {
                self._type = _type
                self.lastUpdated = lastUpdated
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case lastUpdated
            }
        }
        /// A container for a single image.
        ///
        /// - Remark: Generated from `#/components/schemas/FDImageContainer`.
        public struct FDImageContainer: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `ImageContainer`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageContainer/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ImageContainer = "ImageContainer"
            }
            /// Used for decoding `FDItem`. This is always `ImageContainer`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDImageContainer/type`.
            public var _type: Components.Schemas.FDImageContainer._typePayload
            /// - Remark: Generated from `#/components/schemas/FDImageContainer/image`.
            public var image: Components.Schemas.FDImage
            /// Creates a new `FDImageContainer`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `ImageContainer`.
            ///   - image:
            public init(
                _type: Components.Schemas.FDImageContainer._typePayload,
                image: Components.Schemas.FDImage
            ) {
                self._type = _type
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image
            }
        }
        /// A byline for a story. This is deprecated in favour of `FDByline` as a direct child of `FDItem`.
        ///
        /// - Remark: Generated from `#/components/schemas/FDHeadlineByline`.
        @available(*, deprecated)
        public struct FDHeadlineByline: Codable, Hashable, Sendable {
            /// The name of the individual featured in the byline.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadlineByline/name`.
            public var name: Swift.String
            /// The description or job title of the individual featured in the byline.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadlineByline/purpose`.
            public var purpose: Swift.String
            /// Creates a new `FDHeadlineByline`.
            ///
            /// - Parameters:
            ///   - name: The name of the individual featured in the byline.
            ///   - purpose: The description or job title of the individual featured in the byline.
            public init(
                name: Swift.String,
                purpose: Swift.String
            ) {
                self.name = name
                self.purpose = purpose
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case purpose
            }
        }
        /// A headline for a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDHeadline`.
        public struct FDHeadline: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `Headline`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Headline = "Headline"
            }
            /// Used for decoding `FDItem`. This is always `Headline`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/type`.
            public var _type: Components.Schemas.FDHeadline._typePayload
            /// The text in the headline.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/text`.
            public var text: Swift.String
            /// A legacy property for storing a 64-bit timestamp of the time the story was last updated. Deprecated in favour of `firstPublished` and `lastPublished`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/lastUpdated`.
            @available(*, deprecated)
            public var lastUpdated: Swift.Int64?
            /// A 64-bit timestamp of the time the story was first published.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/firstPublished`.
            public var firstPublished: Swift.Int64?
            /// A 64-bit timestamp of the time the story was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/lastPublished`.
            public var lastPublished: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FDHeadline/byline`.
            public var byline: Components.Schemas.FDHeadlineByline?
            /// - Remark: Generated from `#/components/schemas/FDHeadline/topic`.
            public var topic: Components.Schemas.FDTopic?
            /// The ISO 639-1 language code of the language used in the story.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/languageCode`.
            public var languageCode: Swift.String?
            /// The estimated number of minutes that the article would take to be read.
            ///
            /// - Remark: Generated from `#/components/schemas/FDHeadline/readTimeMinutes`.
            public var readTimeMinutes: Swift.Int32?
            /// Creates a new `FDHeadline`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `Headline`.
            ///   - text: The text in the headline.
            ///   - lastUpdated: A legacy property for storing a 64-bit timestamp of the time the story was last updated. Deprecated in favour of `firstPublished` and `lastPublished`.
            ///   - firstPublished: A 64-bit timestamp of the time the story was first published.
            ///   - lastPublished: A 64-bit timestamp of the time the story was last updated.
            ///   - byline:
            ///   - topic:
            ///   - languageCode: The ISO 639-1 language code of the language used in the story.
            ///   - readTimeMinutes: The estimated number of minutes that the article would take to be read.
            public init(
                _type: Components.Schemas.FDHeadline._typePayload,
                text: Swift.String,
                lastUpdated: Swift.Int64? = nil,
                firstPublished: Swift.Int64? = nil,
                lastPublished: Swift.Int64? = nil,
                byline: Components.Schemas.FDHeadlineByline? = nil,
                topic: Components.Schemas.FDTopic? = nil,
                languageCode: Swift.String? = nil,
                readTimeMinutes: Swift.Int32? = nil
            ) {
                self._type = _type
                self.text = text
                self.lastUpdated = lastUpdated
                self.firstPublished = firstPublished
                self.lastPublished = lastPublished
                self.byline = byline
                self.topic = topic
                self.languageCode = languageCode
                self.readTimeMinutes = readTimeMinutes
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case lastUpdated
                case firstPublished
                case lastPublished
                case byline
                case topic
                case languageCode
                case readTimeMinutes
            }
        }
        /// A contributor to a story in a byline.
        ///
        /// - Remark: Generated from `#/components/schemas/FDBylineContributor`.
        public struct FDBylineContributor: Codable, Hashable, Sendable {
            /// The type of the contributor.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBylineContributor/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Contributor = "Contributor"
            }
            /// The type of the contributor.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBylineContributor/type`.
            public var _type: Components.Schemas.FDBylineContributor._typePayload?
            /// The role of the contributor.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBylineContributor/name`.
            public var name: Swift.String
            /// The role of the contributor.
            ///
            /// - Remark: Generated from `#/components/schemas/FDBylineContributor/role`.
            public var role: Swift.String
            /// Creates a new `FDBylineContributor`.
            ///
            /// - Parameters:
            ///   - _type: The type of the contributor.
            ///   - name: The role of the contributor.
            ///   - role: The role of the contributor.
            public init(
                _type: Components.Schemas.FDBylineContributor._typePayload? = nil,
                name: Swift.String,
                role: Swift.String
            ) {
                self._type = _type
                self.name = name
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case role
            }
        }
        /// A byline for a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDByline`.
        public struct FDByline: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `Byline`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDByline/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case Byline = "Byline"
            }
            /// Used for decoding `FDItem`. This is always `Byline`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDByline/type`.
            public var _type: Components.Schemas.FDByline._typePayload
            /// The list of contributors in the article.
            ///
            /// - Remark: Generated from `#/components/schemas/FDByline/contributors`.
            public var contributors: [Components.Schemas.FDBylineContributor]
            /// Creates a new `FDByline`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `Byline`.
            ///   - contributors: The list of contributors in the article.
            public init(
                _type: Components.Schemas.FDByline._typePayload,
                contributors: [Components.Schemas.FDBylineContributor]
            ) {
                self._type = _type
                self.contributors = contributors
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case contributors
            }
        }
        /// A container for a paragraph of text in a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDTextContainer`.
        public struct FDTextContainer: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `textContainer`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTextContainer/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case textContainer = "textContainer"
            }
            /// Used for decoding `FDItem`. This is always `textContainer`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTextContainer/type`.
            public var _type: Components.Schemas.FDTextContainer._typePayload
            /// The type of the container that the text should be displayed in.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTextContainer/containerType`.
            @frozen public enum containerTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case introduction = "introduction"
                case body = "body"
                case crosshead = "crosshead"
            }
            /// The type of the container that the text should be displayed in.
            ///
            /// - Remark: Generated from `#/components/schemas/FDTextContainer/containerType`.
            public var containerType: Components.Schemas.FDTextContainer.containerTypePayload
            /// - Remark: Generated from `#/components/schemas/FDTextContainer/text`.
            public var text: Components.Schemas.FDAttributedText
            /// Creates a new `FDTextContainer`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `textContainer`.
            ///   - containerType: The type of the container that the text should be displayed in.
            ///   - text:
            public init(
                _type: Components.Schemas.FDTextContainer._typePayload,
                containerType: Components.Schemas.FDTextContainer.containerTypePayload,
                text: Components.Schemas.FDAttributedText
            ) {
                self._type = _type
                self.containerType = containerType
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case containerType
                case text
            }
        }
        /// A section header in a story.
        ///
        /// - Remark: Generated from `#/components/schemas/FDSectionHeader`.
        public struct FDSectionHeader: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `SectionHeader`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSectionHeader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SectionHeader = "SectionHeader"
            }
            /// Used for decoding `FDItem`. This is always `SectionHeader`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSectionHeader/type`.
            public var _type: Components.Schemas.FDSectionHeader._typePayload
            /// The text in the section header.
            ///
            /// - Remark: Generated from `#/components/schemas/FDSectionHeader/text`.
            public var text: Swift.String
            /// Creates a new `FDSectionHeader`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `SectionHeader`.
            ///   - text: The text in the section header.
            public init(
                _type: Components.Schemas.FDSectionHeader._typePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// A list of text items.
        ///
        /// - Remark: Generated from `#/components/schemas/FDContentList`.
        public struct FDContentList: Codable, Hashable, Sendable {
            /// Used for decoding `FDItem`. This is always `ContentList`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDContentList/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ContentList = "ContentList"
            }
            /// Used for decoding `FDItem`. This is always `ContentList`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDContentList/type`.
            public var _type: Components.Schemas.FDContentList._typePayload
            /// The type ordering type of the list.
            ///
            /// - Remark: Generated from `#/components/schemas/FDContentList/ordering`.
            @frozen public enum orderingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UNORDERED = "UNORDERED"
                case ORDERED = "ORDERED"
            }
            /// The type ordering type of the list.
            ///
            /// - Remark: Generated from `#/components/schemas/FDContentList/ordering`.
            public var ordering: Components.Schemas.FDContentList.orderingPayload
            /// - Remark: Generated from `#/components/schemas/FDContentList/listItems`.
            public var listItems: Components.Schemas.FDAttributedText
            /// Creates a new `FDContentList`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDItem`. This is always `ContentList`.
            ///   - ordering: The type ordering type of the list.
            ///   - listItems:
            public init(
                _type: Components.Schemas.FDContentList._typePayload,
                ordering: Components.Schemas.FDContentList.orderingPayload,
                listItems: Components.Schemas.FDAttributedText
            ) {
                self._type = _type
                self.ordering = ordering
                self.listItems = listItems
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case ordering
                case listItems
            }
        }
        /// The list of ordered items to be displayed to the user for a page returned by the API.
        ///
        /// - Remark: Generated from `#/components/schemas/FDItem`.
        @frozen public enum FDItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FDItem/case1`.
            case FDBillboard(Components.Schemas.FDBillboard)
            /// - Remark: Generated from `#/components/schemas/FDItem/case2`.
            case FDHierarchicalCollection(Components.Schemas.FDHierarchicalCollection)
            /// - Remark: Generated from `#/components/schemas/FDItem/case3`.
            case FDCollectionHeader(Components.Schemas.FDCollectionHeader)
            /// - Remark: Generated from `#/components/schemas/FDItem/case4`.
            case FDSimpleCollection(Components.Schemas.FDSimpleCollection)
            /// - Remark: Generated from `#/components/schemas/FDItem/case5`.
            case FDSimplePromoGrid(Components.Schemas.FDSimplePromoGrid)
            /// - Remark: Generated from `#/components/schemas/FDItem/case6`.
            case FDWeatherPromoSummary(Components.Schemas.FDWeatherPromoSummary)
            /// - Remark: Generated from `#/components/schemas/FDItem/case7`.
            case FDCarousel(Components.Schemas.FDCarousel)
            /// - Remark: Generated from `#/components/schemas/FDItem/case8`.
            case FDVideoPortraitStory(Components.Schemas.FDVideoPortraitStory)
            /// - Remark: Generated from `#/components/schemas/FDItem/case9`.
            case FDTopicButton(Components.Schemas.FDTopicButton)
            /// - Remark: Generated from `#/components/schemas/FDItem/case10`.
            case FDChipList(Components.Schemas.FDChipList)
            /// - Remark: Generated from `#/components/schemas/FDItem/case11`.
            case FDCopyright(Components.Schemas.FDCopyright)
            /// - Remark: Generated from `#/components/schemas/FDItem/case12`.
            case FDMedia(Components.Schemas.FDMedia)
            /// - Remark: Generated from `#/components/schemas/FDItem/case13`.
            case FDImageContainer(Components.Schemas.FDImageContainer)
            /// - Remark: Generated from `#/components/schemas/FDItem/case14`.
            case FDImage(Components.Schemas.FDImage)
            /// - Remark: Generated from `#/components/schemas/FDItem/case15`.
            case FDHeadline(Components.Schemas.FDHeadline)
            /// - Remark: Generated from `#/components/schemas/FDItem/case16`.
            case FDByline(Components.Schemas.FDByline)
            /// - Remark: Generated from `#/components/schemas/FDItem/case17`.
            case FDTextContainer(Components.Schemas.FDTextContainer)
            /// - Remark: Generated from `#/components/schemas/FDItem/case18`.
            case FDSectionHeader(Components.Schemas.FDSectionHeader)
            /// - Remark: Generated from `#/components/schemas/FDItem/case19`.
            case FDContentList(Components.Schemas.FDContentList)
            /// - Remark: Generated from `#/components/schemas/FDItem/case20`.
            case FDStoryPromo(Components.Schemas.FDStoryPromo)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .FDBillboard(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDHierarchicalCollection(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDCollectionHeader(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDSimpleCollection(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDSimplePromoGrid(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDWeatherPromoSummary(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDCarousel(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDVideoPortraitStory(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDTopicButton(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDChipList(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDCopyright(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDMedia(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDImageContainer(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDImage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDHeadline(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDByline(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDTextContainer(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDSectionHeader(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDContentList(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .FDStoryPromo(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .FDBillboard(value):
                    try value.encode(to: encoder)
                case let .FDHierarchicalCollection(value):
                    try value.encode(to: encoder)
                case let .FDCollectionHeader(value):
                    try value.encode(to: encoder)
                case let .FDSimpleCollection(value):
                    try value.encode(to: encoder)
                case let .FDSimplePromoGrid(value):
                    try value.encode(to: encoder)
                case let .FDWeatherPromoSummary(value):
                    try value.encode(to: encoder)
                case let .FDCarousel(value):
                    try value.encode(to: encoder)
                case let .FDVideoPortraitStory(value):
                    try value.encode(to: encoder)
                case let .FDTopicButton(value):
                    try value.encode(to: encoder)
                case let .FDChipList(value):
                    try value.encode(to: encoder)
                case let .FDCopyright(value):
                    try value.encode(to: encoder)
                case let .FDMedia(value):
                    try value.encode(to: encoder)
                case let .FDImageContainer(value):
                    try value.encode(to: encoder)
                case let .FDImage(value):
                    try value.encode(to: encoder)
                case let .FDHeadline(value):
                    try value.encode(to: encoder)
                case let .FDByline(value):
                    try value.encode(to: encoder)
                case let .FDTextContainer(value):
                    try value.encode(to: encoder)
                case let .FDSectionHeader(value):
                    try value.encode(to: encoder)
                case let .FDContentList(value):
                    try value.encode(to: encoder)
                case let .FDStoryPromo(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// The main data from the API response.
        ///
        /// - Remark: Generated from `#/components/schemas/FDData`.
        public struct FDData: Codable, Hashable, Sendable {
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDData/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ContentResponse = "ContentResponse"
            }
            /// The type of the response object.
            ///
            /// - Remark: Generated from `#/components/schemas/FDData/type`.
            public var _type: Components.Schemas.FDData._typePayload?
            /// - Remark: Generated from `#/components/schemas/FDData/metadata`.
            public var metadata: Components.Schemas.FDDataMetadata
            /// - Remark: Generated from `#/components/schemas/FDData/items`.
            public var items: [Components.Schemas.FDItem]
            /// - Remark: Generated from `#/components/schemas/FDData/trackers`.
            public var trackers: [Components.Schemas.FDTracker]?
            /// Creates a new `FDData`.
            ///
            /// - Parameters:
            ///   - _type: The type of the response object.
            ///   - metadata:
            ///   - items:
            ///   - trackers:
            public init(
                _type: Components.Schemas.FDData._typePayload? = nil,
                metadata: Components.Schemas.FDDataMetadata,
                items: [Components.Schemas.FDItem],
                trackers: [Components.Schemas.FDTracker]? = nil
            ) {
                self._type = _type
                self.metadata = metadata
                self.items = items
                self.trackers = trackers
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case metadata
                case items
                case trackers
            }
        }
        /// The main response object from the API.
        ///
        /// - Remark: Generated from `#/components/schemas/FDResult`.
        public struct FDResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FDResult/data`.
            public var data: Components.Schemas.FDData
            /// The content type of the response from the API.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResult/contentType`.
            @frozen public enum contentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case application_sol_json_semi__space_charset_equals_utf_hyphen_8 = "application/json; charset=utf-8"
            }
            /// The content type of the response from the API.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResult/contentType`.
            public var contentType: Components.Schemas.FDResult.contentTypePayload
            /// Creates a new `FDResult`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - contentType: The content type of the response from the API.
            public init(
                data: Components.Schemas.FDData,
                contentType: Components.Schemas.FDResult.contentTypePayload
            ) {
                self.data = data
                self.contentType = contentType
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case contentType
            }
        }
        /// A new link where the response from the API is now located.
        ///
        /// - Remark: Generated from `#/components/schemas/FDResolverResponse`.
        public struct FDResolverResponse: Codable, Hashable, Sendable {
            /// Used for decoding `FDResolverResult`. This is always `ResolverResponse`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResolverResponse/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ResolverResponse = "ResolverResponse"
            }
            /// Used for decoding `FDResolverResult`. This is always `ResolverResponse`.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResolverResponse/type`.
            public var _type: Components.Schemas.FDResolverResponse._typePayload?
            /// - Remark: Generated from `#/components/schemas/FDResolverResponse/resolvedLink`.
            public var resolvedLink: Components.Schemas.FDLink
            /// Creates a new `FDResolverResponse`.
            ///
            /// - Parameters:
            ///   - _type: Used for decoding `FDResolverResult`. This is always `ResolverResponse`.
            ///   - resolvedLink:
            public init(
                _type: Components.Schemas.FDResolverResponse._typePayload? = nil,
                resolvedLink: Components.Schemas.FDLink
            ) {
                self._type = _type
                self.resolvedLink = resolvedLink
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case resolvedLink
            }
        }
        /// A response from the API indicating the content exists at a new location.
        ///
        /// - Remark: Generated from `#/components/schemas/FDResolverResult`.
        public struct FDResolverResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FDResolverResult/data`.
            public var data: Components.Schemas.FDResolverResponse
            /// The content type of the response from the API.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResolverResult/contentType`.
            @frozen public enum contentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case application_sol_json_semi__space_charset_equals_utf_hyphen_8 = "application/json; charset=utf-8"
            }
            /// The content type of the response from the API.
            ///
            /// - Remark: Generated from `#/components/schemas/FDResolverResult/contentType`.
            public var contentType: Components.Schemas.FDResolverResult.contentTypePayload
            /// Creates a new `FDResolverResult`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - contentType: The content type of the response from the API.
            public init(
                data: Components.Schemas.FDResolverResponse,
                contentType: Components.Schemas.FDResolverResult.contentTypePayload
            ) {
                self.data = data
                self.contentType = contentType
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case contentType
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseError`.
        public struct ResponseError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResponseError/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ResponseError/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ResponseError/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `ResponseError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - code:
            ///   - data:
            public init(
                message: Swift.String? = nil,
                code: Swift.String? = nil,
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.message = message
                self.code = code
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case code
                case data
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The name of the client making the request. `"Chrysalis"` refers to the English language version of the app.
        ///
        /// - Remark: Generated from `#/components/parameters/FDClientNameParameter`.
        @frozen public enum FDClientNameParameter: String, Codable, Hashable, Sendable, CaseIterable {
            case Chrysalis = "Chrysalis"
            case Arabic = "Arabic"
            case Cymru = "Cymru"
            case Hindi = "Hindi"
            case Russian = "Russian"
            case Mundo = "Mundo"
        }
        /// The version of the client making the request.
        ///
        /// - Remark: Generated from `#/components/parameters/FDClientVersionParameter`.
        public typealias FDClientVersionParameter = Swift.String
        /// This appears to be the BBC service which to fetch items for. `"news"` referes to the English language version of the app.
        ///
        /// - Remark: Generated from `#/components/parameters/FDServiceParameter`.
        @frozen public enum FDServiceParameter: String, Codable, Hashable, Sendable, CaseIterable {
            case news = "news"
            case arabic = "arabic"
            case hindi = "hindi"
            case mundo = "mundo"
            case russian = "russian"
            case cymrufyw = "cymrufyw"
        }
        /// The ID of the page to fetch.
        /// Global examples include `"chrysalis_discovery"`, `"front_page"`, `"live_radio"`, `"media_page"`, `"topic_menu"`
        ///
        /// - Remark: Generated from `#/components/parameters/FDPageParameter`.
        public typealias FDPageParameter = Swift.String
        /// The type of the page being fetched.
        ///
        /// - Remark: Generated from `#/components/parameters/FDTypeParameter`.
        @frozen public enum FDTypeParameter: String, Codable, Hashable, Sendable, CaseIterable {
            case index = "index"
            case topic = "topic"
            case asset = "asset"
            case topiccollection = "topiccollection"
            case resolver = "resolver"
        }
        /// The first half of a UK postcode to customise results for.
        ///
        /// - Remark: Generated from `#/components/parameters/FDClientLocationParameter`.
        public typealias FDClientLocationParameter = Swift.String
        /// The release track of the API to use.
        ///
        /// - Remark: Generated from `#/components/parameters/FDReleaseParameter`.
        @frozen public enum FDReleaseParameter: String, Codable, Hashable, Sendable, CaseIterable {
            case public_hyphen_alpha = "public-alpha"
            case team = "team"
        }
        /// Does the client need to be prompted with an update.
        ///
        /// - Remark: Generated from `#/components/parameters/FDClientNeedsUpdateParameter`.
        public typealias FDClientNeedsUpdateParameter = Swift.Bool
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Fetch a BBC news page.
    ///
    /// Returns data for a page that returns a list of links to stories, or the contents of an individual story (deprecated). Examples include the "Home" tab, pages for specific topic categories.
    ///
    /// - Remark: HTTP `GET /fd/abl`.
    /// - Remark: Generated from `#/paths//fd/abl/get(abl)`.
    public enum abl {
        public static let id: Swift.String = "abl"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fd/abl/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/FDClientNameParameter`.
                @frozen public enum FDClientNameParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case Chrysalis = "Chrysalis"
                    case Arabic = "Arabic"
                    case Cymru = "Cymru"
                    case Hindi = "Hindi"
                    case Russian = "Russian"
                    case Mundo = "Mundo"
                }
                /// The name of the client making the request. `"Chrysalis"` refers to the English language version of the app.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/clientName`.
                public var clientName: Components.Parameters.FDClientNameParameter
                /// The version of the client making the request.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/clientVersion`.
                public var clientVersion: Components.Parameters.FDClientVersionParameter
                /// - Remark: Generated from `#/components/parameters/FDServiceParameter`.
                @frozen public enum FDServiceParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case news = "news"
                    case arabic = "arabic"
                    case hindi = "hindi"
                    case mundo = "mundo"
                    case russian = "russian"
                    case cymrufyw = "cymrufyw"
                }
                /// This appears to be the BBC service which to fetch items for. `"news"` referes to the English language version of the app.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/service`.
                public var service: Components.Parameters.FDServiceParameter
                /// The ID of the page to fetch.
                /// Global examples include `"chrysalis_discovery"`, `"front_page"`, `"live_radio"`, `"media_page"`, `"topic_menu"`
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/page`.
                public var page: Components.Parameters.FDPageParameter
                /// - Remark: Generated from `#/components/parameters/FDTypeParameter`.
                @frozen public enum FDTypeParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case index = "index"
                    case topic = "topic"
                    case asset = "asset"
                    case topiccollection = "topiccollection"
                    case resolver = "resolver"
                }
                /// The type of the page being fetched.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/type`.
                public var _type: Components.Parameters.FDTypeParameter
                /// The first half of a UK postcode to customise results for.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/clientLoc`.
                public var clientLoc: Components.Parameters.FDClientLocationParameter?
                /// - Remark: Generated from `#/components/parameters/FDReleaseParameter`.
                @frozen public enum FDReleaseParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case public_hyphen_alpha = "public-alpha"
                    case team = "team"
                }
                /// The release track of the API to use.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/release`.
                public var release: Components.Parameters.FDReleaseParameter?
                /// Does the client need to be prompted with an update.
                ///
                /// - Remark: Generated from `#/paths/fd/abl/GET/query/clientNeedsUpdate`.
                public var clientNeedsUpdate: Components.Parameters.FDClientNeedsUpdateParameter?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - clientName: The name of the client making the request. `"Chrysalis"` refers to the English language version of the app.
                ///   - clientVersion: The version of the client making the request.
                ///   - service: This appears to be the BBC service which to fetch items for. `"news"` referes to the English language version of the app.
                ///   - page: The ID of the page to fetch.
                ///   - _type: The type of the page being fetched.
                ///   - clientLoc: The first half of a UK postcode to customise results for.
                ///   - release: The release track of the API to use.
                ///   - clientNeedsUpdate: Does the client need to be prompted with an update.
                public init(
                    clientName: Components.Parameters.FDClientNameParameter,
                    clientVersion: Components.Parameters.FDClientVersionParameter,
                    service: Components.Parameters.FDServiceParameter,
                    page: Components.Parameters.FDPageParameter,
                    _type: Components.Parameters.FDTypeParameter,
                    clientLoc: Components.Parameters.FDClientLocationParameter? = nil,
                    release: Components.Parameters.FDReleaseParameter? = nil,
                    clientNeedsUpdate: Components.Parameters.FDClientNeedsUpdateParameter? = nil
                ) {
                    self.clientName = clientName
                    self.clientVersion = clientVersion
                    self.service = service
                    self.page = page
                    self._type = _type
                    self.clientLoc = clientLoc
                    self.release = release
                    self.clientNeedsUpdate = clientNeedsUpdate
                }
            }
            public var query: Operations.abl.Input.Query
            /// - Remark: Generated from `#/paths/fd/abl/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.abl.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.abl.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.abl.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.abl.Input.Query,
                headers: Operations.abl.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/abl/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/abl/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FDResult])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FDResult] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.abl.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.abl.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful
            ///
            /// - Remark: Generated from `#/paths//fd/abl/get(abl)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.abl.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.abl.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/abl/GET/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/abl/GET/responses/204/content/application\/json`.
                    case json([Components.Schemas.FDResolverResult])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FDResolverResult] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.abl.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.abl.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// New destination
            ///
            /// - Remark: Generated from `#/paths//fd/abl/get(abl)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.abl.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.abl.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/abl/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/abl/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ResponseError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ResponseError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.abl.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.abl.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//fd/abl/get(abl)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.abl.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.abl.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch the full contents of a story.
    ///
    /// Returns the full contents of a story.
    ///
    /// - Remark: HTTP `GET /fd/app-article-api`.
    /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)`.
    public enum app_hyphen_article_hyphen_api {
        public static let id: Swift.String = "app-article-api"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fd/app-article-api/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/FDClientNameParameter`.
                @frozen public enum FDClientNameParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case Chrysalis = "Chrysalis"
                    case Arabic = "Arabic"
                    case Cymru = "Cymru"
                    case Hindi = "Hindi"
                    case Russian = "Russian"
                    case Mundo = "Mundo"
                }
                /// The name of the client making the request. `"Chrysalis"` refers to the English language version of the app.
                ///
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/query/clientName`.
                public var clientName: Components.Parameters.FDClientNameParameter
                /// The version of the client making the request.
                ///
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/query/clientVersion`.
                public var clientVersion: Components.Parameters.FDClientVersionParameter
                /// The ID or URL of the page to fetch.
                ///
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/query/page`.
                public var page: Swift.String
                /// - Remark: Generated from `#/components/parameters/FDReleaseParameter`.
                @frozen public enum FDReleaseParameter: String, Codable, Hashable, Sendable, CaseIterable {
                    case public_hyphen_alpha = "public-alpha"
                    case team = "team"
                }
                /// The release track of the API to use.
                ///
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/query/release`.
                public var release: Components.Parameters.FDReleaseParameter?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - clientName: The name of the client making the request. `"Chrysalis"` refers to the English language version of the app.
                ///   - clientVersion: The version of the client making the request.
                ///   - page: The ID or URL of the page to fetch.
                ///   - release: The release track of the API to use.
                public init(
                    clientName: Components.Parameters.FDClientNameParameter,
                    clientVersion: Components.Parameters.FDClientVersionParameter,
                    page: Swift.String,
                    release: Components.Parameters.FDReleaseParameter? = nil
                ) {
                    self.clientName = clientName
                    self.clientVersion = clientVersion
                    self.page = page
                    self.release = release
                }
            }
            public var query: Operations.app_hyphen_article_hyphen_api.Input.Query
            /// - Remark: Generated from `#/paths/fd/app-article-api/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.app_hyphen_article_hyphen_api.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.app_hyphen_article_hyphen_api.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.app_hyphen_article_hyphen_api.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.app_hyphen_article_hyphen_api.Input.Query,
                headers: Operations.app_hyphen_article_hyphen_api.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FDResult])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FDResult] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.app_hyphen_article_hyphen_api.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.app_hyphen_article_hyphen_api.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful
            ///
            /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.app_hyphen_article_hyphen_api.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.app_hyphen_article_hyphen_api.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/204/content/application\/json`.
                    case json([Components.Schemas.FDResolverResult])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FDResolverResult] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.app_hyphen_article_hyphen_api.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.app_hyphen_article_hyphen_api.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// New destination
            ///
            /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.app_hyphen_article_hyphen_api.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.app_hyphen_article_hyphen_api.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fd/app-article-api/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ResponseError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ResponseError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.app_hyphen_article_hyphen_api.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.app_hyphen_article_hyphen_api.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//fd/app-article-api/get(app-article-api)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.app_hyphen_article_hyphen_api.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.app_hyphen_article_hyphen_api.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
